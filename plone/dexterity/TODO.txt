Dexterity To-Do List
====================

 Immediate changes/upcoming refactoring
 --------------------------------------
 
    [ ] plone.supermodel: Support for sequence and choice fields 

 Areas that need ownership
 ------------------------- 
    
    [ ] i18n support in schema (hannosch?)

    [ ] Transforms (hannosch?)

    [ ] Schema editor and Plone control panel (davisagli?)

    [ ] Field-level security (alecm?)
    
    [ ] Reference engine integration (alecm?)
        - need plone.app.relations field + widget
    
    [ ] Versioning and staging integration
        - need CMFEditions policy for version-on-save
        - need CMFDiffTool support for IContentType and schema interfaces
        - need plone.app.iterate to use plone.app.relations instead of 
            AT references
        - need plone.app.linkintegrity to use plone.app.relations instead of
            AT references

Detailed to-do items
====================

 plone.supermodel
 ----------------
 
    [*] We need field handlers/syntax for:

        - min, max for IMinMax fields (can be generalised)
        - default on non-text fields (can be generalised)
        - missing_value on non-text fields (can be generalised)
        - value_type of collection fields (see below)
        - key_type and value_type for IDict
        - Datetime, Date, Timedelta fields (do not support IFromUnicode)
        - Tuple, List, Set, Frozenset fields (see below)
        
        Support for choice and sequence fields will entail:
        
        - Choice fields with static values
        - Choice fields using vocabulary factories
        - Dealing with the value_type of List, Tuple, Set, Frozenset fields
            - Should support simple types, by giving dotted name of type
            - Should support nested Choice fields

        This will require a new handler class, since the generic handler
        can't deal with this.

        Example syntax:
        
            <field name="pickone" type="zope.schema.Choice">
                <title>Please pick one</title>
                <vocabulary>
                    <element>Plone</element>
                    <element>Drupal</element>
                    <element>Alfresco</element>
                </vocabulary>
            </field>
            
            <field name="pickanother" type="zope.schema.Choice">
                <title>Please another one</title>
                <vocabulary>my.vocabulary.factory</vocabulary>
            </field>
            
            <field name="pickseveral" type="zope.schema.List">
                <title>Please select multiple</title>
                <value_type type="zope.schema.Choice">
                    <!-- Support full field definition here -->
                <value_type>
            </field>

 plone.dexterity
 ---------------

    Schema and FTI
    ~~~~~~~~~~~~~~
         
    [ ] Factory and class grokker need to initialise field level security
        based on schema
        
        - There is an attempt at this in security.py, but it doesn't seem to
          make any difference. The usage is factory.py is currently commented
          out.

    [ ] Need to handle case where portal is renamed and/or FTI is renamed.
        In both cases, the prefix+portal type name encoded in the schema name 
        may cause problems. Ergo, we probably want a better way to map a named
        schema (which may not exist yet) to an actual FTI instance for looking
        up the model.
      
        - Perhaps we can keep "ghost FTI" utilities around until a new one
          is registered for the same name?
        
    Views
    ~~~~~
    
    [ ] Properly test form widget construction code
    [ ] Performance test the widget construction code

    Misc
    ~~~~
    
    [ ] Need to properly support i18n in model file
    
    [ ] Provide support for various types of migration when FTIs change, e.g.
        swapping from one FTI to another or changing a model significantly.
     
 plone.app.dexterity
 -------------------
 
    [ ] Better views for IDexterityItem and IDexterityContainer
    [ ] Provide optional standard Ploneish metadata fieldsets for add/edit 
        forms (should be implemented as behaviours)
    [ ] Make content types support title-to-id (again, should be a behaviour)
    
    [ ] UI for managing types, importing, exporting etc.
    [ ] UI for building schemata
    [ ] UI for view customisation
        - Write out a "flat" template that includes all current fields
        - Register with portal_view_customizations
    
 Integration concerns
 --------------------
 
    - Need a reference engine, widget (plone.app.relations - fields/widgets)
    - Need versioning with version-on-save (CMFEditions policy - behavior)
    - Need content staging (iterate w/o AT references - behavior)
    - Need link integrity (linkintegrity w/o AT references - behavior)
    - Need inline validation (have this for formlib, not z3c.form)
    - Need inline editing (have this for formlib, not z3c.form)
    - Need transforms ala safe_html